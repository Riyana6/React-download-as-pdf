"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var newLine = '\r\n';
var raf = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : process.nextTick;
var makeWrapper = function (wrapChar) { return function (str) { return "" + wrapChar + str + wrapChar; }; };
var makeResolver = function (resolve, newLineAtEnd) { return function (content) {
    if (newLineAtEnd) {
        content.push('');
    }
    resolve(content.join(newLine));
}; };
var identityMapping = function (arr, initialMapping) {
    return arr.reduce(function (acc, k) {
        acc[k] = k;
        return acc;
    }, initialMapping);
};
var extractHeaderFromData = function (datas) {
    return datas.reduce(function (acc, v) { return Array.isArray(v)
        ? acc
        : identityMapping(Object.keys(v), acc); }, {});
};
var extractHeaderFromColumns = function (columns) {
    return columns.reduce(function (acc, v) {
        if (typeof v === 'string') {
            acc[v] = v;
        }
        else {
            acc[v.id] = (typeof v.displayName !== 'undefined') ? v.displayName : v.id;
        }
        return acc;
    }, {});
};
function toChunks(arr, chunkSize) {
    return __spreadArrays(Array(Math.ceil(arr.length / chunkSize))).reduce(function (acc, _, i) {
        var begin = i * chunkSize;
        return acc.concat([arr.slice(begin, begin + chunkSize)]);
    }, []);
}
var createChunkProcessor = function (resolve, wrap, content, datas, columnOrder, separator, chunkSize) {
    var chunks = toChunks(datas, chunkSize);
    var i = 0;
    return function processChunk() {
        if (i >= chunks.length) {
            resolve(content);
            return;
        }
        var chunk = chunks[i];
        i += 1;
        chunk
            .map(function (v) {
            return Array.isArray(v)
                ? v
                : columnOrder.map(function (k) {
                    return typeof v[k] !== 'undefined'
                        ? v[k]
                        : '';
                });
        })
            .forEach(function (v) {
            content.push(v.map(wrap).join(separator));
        });
        raf(processChunk);
    };
};
function csv(_a) {
    var columns = _a.columns, datas = _a.datas, _b = _a.separator, separator = _b === void 0 ? ',' : _b, _c = _a.noHeader, noHeader = _c === void 0 ? false : _c, _d = _a.wrapColumnChar, wrapColumnChar = _d === void 0 ? '' : _d, _e = _a.newLineAtEnd, newLineAtEnd = _e === void 0 ? false : _e, _f = _a.chunkSize, chunkSize = _f === void 0 ? 1000 : _f;
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_g) {
            return [2 /*return*/, new Promise(function (_resolve) {
                    var resolve = makeResolver(_resolve, newLineAtEnd);
                    var wrap = makeWrapper(wrapColumnChar);
                    var header = columns
                        ? extractHeaderFromColumns(columns)
                        : extractHeaderFromData(datas);
                    var content = [];
                    if (!noHeader) {
                        var headerNames = Object.values(header);
                        if (headerNames.length > 0) {
                            content.push(headerNames.map(wrap).join(separator));
                        }
                    }
                    if (Array.isArray(datas)) {
                        var columnOrder = Object.keys(header);
                        var processChunk = createChunkProcessor(resolve, wrap, content, datas, columnOrder, separator, chunkSize);
                        raf(processChunk);
                    }
                    else {
                        resolve(content);
                    }
                })];
        });
    });
}
exports.default = csv;
//# sourceMappingURL=csv.js.map