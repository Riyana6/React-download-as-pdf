"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable no-duplicate-string */
var chai_1 = require("chai");
var csv_1 = require("./csv");
var newLine = '\r\n';
var columnSet1 = [{ id: 'cell1' }];
var columnSet2 = [{ id: 'cell1' }, { id: 'cell2' }];
var columnSet3 = [{ id: 'cell1', displayName: 'Cell name' }];
var columnSet4 = [{ id: 'cell2' }, { id: 'cell1' }];
var dataSet1 = [{ cell1: 'row1' }];
var dataSet2 = [{ cell1: 'row1', cell2: 'row1' }];
var dataSet3 = [['cell1', 'cell2']];
var dataSet4 = [['cell1', 'cell2'], ['cell1', 'cell2']];
var dataSet5 = [{ cell1: 'row1' }, { cell1: 'row2' }];
describe('CSV Creator', function () {
    it('Should work with empty data', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, csv_1.default({ columns: [], datas: [] })];
                case 1:
                    result = _a.sent();
                    chai_1.expect(result).to.equal("");
                    return [2 /*return*/];
            }
        });
    }); });
    describe('Default separator', function () {
        var separator = ',';
        it('Single cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet1 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + newLine + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('Multiple cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet2, datas: dataSet2 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2" + newLine + "row1" + separator + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('Header display name', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet3, datas: dataSet1 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("Cell name" + newLine + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('Ordered cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet4, datas: dataSet2 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell2" + separator + "cell1" + newLine + "row1" + separator + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('No header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet1, separator: separator, noHeader: true })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal('row1');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Auto header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet2 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2" + newLine + "row1" + separator + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - single row', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet3 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2");
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - multiple row', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet4 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2" + newLine + "cell1" + separator + "cell2");
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - with header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet4, datas: dataSet4 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell2" + separator + "cell1" + newLine + "cell1" + separator + "cell2" + newLine + "cell1" + separator + "cell2");
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Column Wrap', function () {
        var separator = ',';
        var wrapColumnChar = '"';
        it('Single cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet1, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell1" + wrapColumnChar + newLine + wrapColumnChar + "row1" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Multiple cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet2, datas: dataSet2, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar + newLine + wrapColumnChar + "row1" + wrapColumnChar + separator + wrapColumnChar + "row1" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Header display name', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet3, datas: dataSet1, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "Cell name" + wrapColumnChar + newLine + wrapColumnChar + "row1" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Ordered cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet4, datas: dataSet2, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell2" + wrapColumnChar + separator + wrapColumnChar + "cell1" + wrapColumnChar + newLine + wrapColumnChar + "row1" + wrapColumnChar + separator + wrapColumnChar + "row1" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('No header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet1, separator: separator, noHeader: true, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "row1" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Auto header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet2, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar + newLine + wrapColumnChar + "row1" + wrapColumnChar + separator + wrapColumnChar + "row1" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - single row', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet3, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - multiple row', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet4, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar + newLine + wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - with header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet4, datas: dataSet4, wrapColumnChar: wrapColumnChar })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal(wrapColumnChar + "cell2" + wrapColumnChar + separator + wrapColumnChar + "cell1" + wrapColumnChar + newLine + wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar + newLine + wrapColumnChar + "cell1" + wrapColumnChar + separator + wrapColumnChar + "cell2" + wrapColumnChar);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Semicolon separator', function () {
        var separator = ';';
        it('Single cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet1, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + newLine + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('Multiple cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet2, datas: dataSet2, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2" + newLine + "row1" + separator + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('Header display name', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet3, datas: dataSet1, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("Cell name" + newLine + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('Ordered cell', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet4, datas: dataSet2, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell2" + separator + "cell1" + newLine + "row1" + separator + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('No header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet1, separator: separator, noHeader: true })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal('row1');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Auto header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet2, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2" + newLine + "row1" + separator + "row1");
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - single row', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet3, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2");
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - multiple row', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: false, datas: dataSet4, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + separator + "cell2" + newLine + "cell1" + separator + "cell2");
                        return [2 /*return*/];
                }
            });
        }); });
        it('array of array datas - with header', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet4, datas: dataSet4, separator: separator })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell2" + separator + "cell1" + newLine + "cell1" + separator + "cell2" + newLine + "cell1" + separator + "cell2");
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('New line at end', function () {
        it('should not insert new line at end', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet5, newLineAtEnd: false })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + newLine + "row1" + newLine + "row2");
                        return [2 /*return*/];
                }
            });
        }); });
        it('should insert new line at end', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet5, newLineAtEnd: true })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + newLine + "row1" + newLine + "row2" + newLine);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Should process chunks', function () {
        it('should process each line as a chunk', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csv_1.default({ columns: columnSet1, datas: dataSet5, chunkSize: 1 })];
                    case 1:
                        result = _a.sent();
                        chai_1.expect(result).to.equal("cell1" + newLine + "row1" + newLine + "row2");
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=csv.spec.js.map